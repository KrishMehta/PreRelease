DECLARE totalCow: INTEGER
PRINT “Input the herd size.”
INPUT totalCow

DECLARE identity[]: ARRAY[1:totalCow] OF INTEGER
DECLARE yieldL: REAL
DECLARE yield[]: ARRAY[1:totalCow] OF REAL
DECLARE totalYield: REAL
DECLARE highestYield: REAL
DECLARE dailyYield[]: ARRAY[1:totalCow] OF REAL
DECLARE low[]: ARRAY[1:totalCow] OF INTEGER
DECLARE cowID: INTEGER
DECLARE average: REAL
DECLARE validated: BOOLEAN
DECLARE defined: BOOLEAN

FOR count = 1 TO totalCow
	REPEAT
		PRINT “Input the cow identity for cow #”, (count + 1) + “.”
		INPUT CowID

		validated = true

		IF ((cowID < 0) OR (cowID > 999)) THEN
			PRINT “This identity does not fall under the range of possible identities.”
			validated = false
			continue;
        ENDIF

        FOR i = 1 TO totalCow
	        IF (identity[i] = cowID) THEN
		        PRINT “This identity has already been used by another cow.”
		        validated = false
                break;
            ENDIF
		NEXT
	UNTIL validated = true

	identity[count] <-- cowID

NEXT

FOR day = 1 TO 7
	FOR session = 1 TO 2
		FOR i = 1 TO totalCow
			REPEAT
				PRINT “Enter the identity of the cow to be milked on day #”, (day + 1), “ session #”, (session + 1), “.”
				INPUT cowID

				defined = false

				FOR count = 1 TO totalCow
					IF (identity[count] = cowID) THEN
						defined = true
						break;
					ENDIF
				NEXT

				IF defined = false THEN
					PRINT “This identity has not been pre-defined or already has a defined value.”
				ENDIF
			UNTIL defined = true

			PRINT “Enter the yield of cow #”, cowID, “.”
			INPUT yieldL

			FOR counter = 1 TO totalCow
				IF (identity[counter] = cowID) THEN

				    yield[counter] = yield[counter] + yieldL
				    totalYield = totalYield + yieldL
				    dailyYield[counter] = dailyYield[counter] + yieldL

				    IF (yield[counter] MOD 1 < 0.5) THEN
                        yield[counter] = yield[counter] - (yield[counter] MOD 1)
                    ELSE
                        yield[counter] = yield[counter] + (1 - (yield[counter] MOD 1))
                    ENDIF

                    IF (totalYield MOD 1 < 0.5) THEN
                        totalYield = totalYield - (totalYield MOD 1)
                    ELSE
                        totalYield = totalYield + (1 - (totalYield MOD 1))

                    IF (session = 2) THEN
	                    IF (dailyYield[counter] < 12) THEN
		                    low[counter] <-- low[counter] + 1
	                    ENDIF
                    ENDIF

                    dailyYield[counter] <-- 0

                ENDIF
			NEXT
		NEXT
    NEXT
NEXT

PRINT “The final yield of all the cows is “, totalYield, “ litres of milk.”

FOR counter = 1 TO totalCow
	average = (totalYield/totalCow)

    IF (average MOD 1 < 0.5) THEN
        average = average - (average MOD 1)
    ELSE
	    average = average + (1 - (average MOD 1))
    ENDIF

    PRINT “The average yield for each cow in a day for identity “, identity[counter], “: “, average, “ litres of milk.”

    IF (yield[counter] > highestYield) THEN
	    highestYield <-- yield[counter]
    ENDIF

NEXT

FOR counter = 1 TO totalCow
    IF (yield[counter] = highestYield) THEN
	    PRINT “The cow identity: “, identity[counter], “ has the highest production of “, highestYield, “.”
    ENDIF

    IF (low[counter] > 3) THEN
	    PRINT “identity:” identity[counter], “ has produced less than 12 litres of milk for at least 4 days.”
    ENDIF
NEXT

